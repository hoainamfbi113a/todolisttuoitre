{"ast":null,"code":"import { addToDo, checked, deleteToDo, editToDo, removeAllChecked, sortAZ, sortZA } from \"../type/type\";\nconst stateDefault = {\n  todo: [],\n  isLoading: true\n};\nexport const ToDoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stateDefault;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case addToDo: {\n    //     const {textTask} = action.todo;\n    //     const newToDo = [...state.todo,{textTask: textTask,status:false}];\n    //     const newState = {...state,todo:[...newToDo]};\n    //     state = newState;\n    //     return {...state}\n    // };\n    // case editToDo:{\n    //     const {textTask,key} = action.todo;\n    //     let newToDo = [...state.todo];\n    //     newToDo[key].textTask = textTask;\n    //     state.todo = [...newToDo];\n    //     return {...state}\n    // };\n    // case deleteToDo:{\n    //     let {index} = action;\n    //     let newToDo = [...state.todo];\n    //     newToDo.splice(index,1);\n    //     state.todo = [...newToDo];\n    //     return {...state}\n    // };\n    // case checked:{\n    //     let {checked,index} = action.checkedToDo;\n    //     let newToDoList = [...state.todo];\n    //     newToDoList[index].status = checked;\n    //     state.todo = [...newToDoList];\n    //     return {...state};\n    // };\n    case removeAllChecked:\n      {\n        let newToDoList = [...state.todo];\n        newToDoList.forEach(work => work.status = false);\n        state.todo = [...newToDoList];\n        return { ...state\n        };\n      }\n      ;\n\n    case sortAZ:\n      {\n        let newToDoList = [...state.todo];\n        let newList = newToDoList.sort(function (a, b) {\n          if (a.status < b.status) {\n            return -1;\n          } else {\n            return 1;\n          }\n        }); // console.log(newList)\n\n        state.todo = [...newList];\n        return { ...state\n        };\n      }\n      ;\n\n    case sortZA:\n      {\n        let newToDoList = [...state.todo];\n        let newList = newToDoList.sort(function (a, b) {\n          if (a.status > b.status) {\n            return -1;\n          } else {\n            return 1;\n          }\n        }); // console.log(newList)\n\n        state.todo = [...newList];\n        return { ...state\n        };\n      }\n      ;\n\n    case \"getToDoListReducer\":\n      {\n        let newToDoList = [...state.todo]; // console.log(\"todoReducer\");\n\n        newToDoList = [...action.list];\n        state.todo = [...newToDoList];\n        state.isLoading = false;\n        return { ...state\n        };\n      }\n      ;\n\n    case \"setIsLoading\":\n      {\n        state.isLoading = true;\n        return { ...state\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n_c = ToDoReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoReducer\");","map":{"version":3,"names":["addToDo","checked","deleteToDo","editToDo","removeAllChecked","sortAZ","sortZA","stateDefault","todo","isLoading","ToDoReducer","state","action","type","newToDoList","forEach","work","status","newList","sort","a","b","list"],"sources":["/home/pc/todolisttuoitre/my-app/src/redux/toDoReducer/todoReducer.js"],"sourcesContent":["import { addToDo, checked, deleteToDo, editToDo, removeAllChecked, sortAZ, sortZA } from \"../type/type\";\n\nconst stateDefault = {\n    todo: [\n        \n    ],\n    isLoading: true,\n}\n\nexport const ToDoReducer = (state = stateDefault, action)=>{\n    switch(action.type){\n        // case addToDo: {\n        //     const {textTask} = action.todo;\n        //     const newToDo = [...state.todo,{textTask: textTask,status:false}];\n        //     const newState = {...state,todo:[...newToDo]};\n        //     state = newState;\n        //     return {...state}\n        // };\n        // case editToDo:{\n        //     const {textTask,key} = action.todo;\n        //     let newToDo = [...state.todo];\n        //     newToDo[key].textTask = textTask;\n        //     state.todo = [...newToDo];\n        //     return {...state}\n        // };\n        // case deleteToDo:{\n        //     let {index} = action;\n        //     let newToDo = [...state.todo];\n        //     newToDo.splice(index,1);\n        //     state.todo = [...newToDo];\n        //     return {...state}\n        // };\n        // case checked:{\n        //     let {checked,index} = action.checkedToDo;\n        //     let newToDoList = [...state.todo];\n        //     newToDoList[index].status = checked;\n        //     state.todo = [...newToDoList];\n        //     return {...state};\n        // };\n        case removeAllChecked: {\n            let newToDoList = [...state.todo];\n            newToDoList.forEach(work => work.status = false); \n            state.todo = [...newToDoList];\n            return {...state};\n        };\n        case sortAZ: {\n            let newToDoList = [...state.todo];\n            let newList = newToDoList.sort(function(a,b){\n                if(a.status < b.status){\n                    return -1\n                } else {\n                    return 1\n                }\n            });\n            // console.log(newList)\n            state.todo = [...newList];\n            return {...state}\n        };\n        case sortZA: {\n            let newToDoList = [...state.todo];\n            let newList = newToDoList.sort(function(a,b){\n                if(a.status > b.status){\n                    return -1\n                } else {\n                    return 1\n                }\n            });\n            // console.log(newList)\n            state.todo = [...newList];\n            return {...state}\n        };\n        case \"getToDoListReducer\": {\n            let newToDoList = [...state.todo];\n            // console.log(\"todoReducer\");\n            newToDoList = [...action.list];\n            state.todo = [...newToDoList];\n            state.isLoading = false;\n            return {...state}\n        };\n        case \"setIsLoading\": {\n            state.isLoading = true;\n            return {...state};\n        }\n        default: return {...state}\n    }\n} "],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,gBAAjD,EAAmEC,MAAnE,EAA2EC,MAA3E,QAAyF,cAAzF;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,EADW;EAIjBC,SAAS,EAAE;AAJM,CAArB;AAOA,OAAO,MAAMC,WAAW,GAAG,YAAgC;EAAA,IAA/BC,KAA+B,uEAAvBJ,YAAuB;EAAA,IAATK,MAAS;;EACvD,QAAOA,MAAM,CAACC,IAAd;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAKT,gBAAL;MAAuB;QACnB,IAAIU,WAAW,GAAG,CAAC,GAAGH,KAAK,CAACH,IAAV,CAAlB;QACAM,WAAW,CAACC,OAAZ,CAAoBC,IAAI,IAAIA,IAAI,CAACC,MAAL,GAAc,KAA1C;QACAN,KAAK,CAACH,IAAN,GAAa,CAAC,GAAGM,WAAJ,CAAb;QACA,OAAO,EAAC,GAAGH;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKN,MAAL;MAAa;QACT,IAAIS,WAAW,GAAG,CAAC,GAAGH,KAAK,CAACH,IAAV,CAAlB;QACA,IAAIU,OAAO,GAAGJ,WAAW,CAACK,IAAZ,CAAiB,UAASC,CAAT,EAAWC,CAAX,EAAa;UACxC,IAAGD,CAAC,CAACH,MAAF,GAAWI,CAAC,CAACJ,MAAhB,EAAuB;YACnB,OAAO,CAAC,CAAR;UACH,CAFD,MAEO;YACH,OAAO,CAAP;UACH;QACJ,CANa,CAAd,CAFS,CAST;;QACAN,KAAK,CAACH,IAAN,GAAa,CAAC,GAAGU,OAAJ,CAAb;QACA,OAAO,EAAC,GAAGP;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKL,MAAL;MAAa;QACT,IAAIQ,WAAW,GAAG,CAAC,GAAGH,KAAK,CAACH,IAAV,CAAlB;QACA,IAAIU,OAAO,GAAGJ,WAAW,CAACK,IAAZ,CAAiB,UAASC,CAAT,EAAWC,CAAX,EAAa;UACxC,IAAGD,CAAC,CAACH,MAAF,GAAWI,CAAC,CAACJ,MAAhB,EAAuB;YACnB,OAAO,CAAC,CAAR;UACH,CAFD,MAEO;YACH,OAAO,CAAP;UACH;QACJ,CANa,CAAd,CAFS,CAST;;QACAN,KAAK,CAACH,IAAN,GAAa,CAAC,GAAGU,OAAJ,CAAb;QACA,OAAO,EAAC,GAAGP;QAAJ,CAAP;MACH;MAAA;;IACD,KAAK,oBAAL;MAA2B;QACvB,IAAIG,WAAW,GAAG,CAAC,GAAGH,KAAK,CAACH,IAAV,CAAlB,CADuB,CAEvB;;QACAM,WAAW,GAAG,CAAC,GAAGF,MAAM,CAACU,IAAX,CAAd;QACAX,KAAK,CAACH,IAAN,GAAa,CAAC,GAAGM,WAAJ,CAAb;QACAH,KAAK,CAACF,SAAN,GAAkB,KAAlB;QACA,OAAO,EAAC,GAAGE;QAAJ,CAAP;MACH;MAAA;;IACD,KAAK,cAAL;MAAqB;QACjBA,KAAK,CAACF,SAAN,GAAkB,IAAlB;QACA,OAAO,EAAC,GAAGE;QAAJ,CAAP;MACH;;IACD;MAAS,OAAO,EAAC,GAAGA;MAAJ,CAAP;EAzEb;AA2EH,CA5EM;KAAMD,W"},"metadata":{},"sourceType":"module"}