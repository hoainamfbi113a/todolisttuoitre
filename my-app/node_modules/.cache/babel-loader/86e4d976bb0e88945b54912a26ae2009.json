{"ast":null,"code":"import { addToDo, checked, deleteToDo, editToDo, removeAllChecked, sortAZ } from \"../type/type\";\nconst stateDefault = {\n  todo: []\n};\nexport const ToDoReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stateDefault;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case addToDo:\n      {\n        const {\n          content\n        } = action.todo;\n        const newToDo = [...state.todo, {\n          content: content,\n          status: false\n        }];\n        const newState = { ...state,\n          todo: [...newToDo]\n        };\n        state = newState;\n        return { ...state\n        };\n      }\n      ;\n\n    case editToDo:\n      {\n        const {\n          content,\n          key\n        } = action.todo;\n        let newToDo = [...state.todo];\n        newToDo[key].content = content.content;\n        state.todo = [...newToDo];\n        return { ...state\n        };\n      }\n      ;\n\n    case deleteToDo:\n      {\n        let {\n          index\n        } = action;\n        let newToDo = [...state.todo];\n        newToDo.splice(index, 1);\n        state.todo = [...newToDo];\n        return { ...state\n        };\n      }\n      ;\n\n    case checked:\n      {\n        let {\n          checked,\n          index\n        } = action.checkedToDo;\n        let newToDoList = [...state.todo];\n        newToDoList[index].status = checked;\n        state.todo = [...newToDoList];\n        return { ...state\n        };\n      }\n      ;\n\n    case removeAllChecked:\n      {\n        let newToDoList = [...state.todo];\n        newToDoList.forEach(work => work.status = false);\n        state.todo = [...newToDoList];\n        return { ...state\n        };\n      }\n      ;\n\n    case sortAZ:\n      {\n        let newToDoList = [...state.todo];\n        let newList = newToDoList.sort((a, b) => {\n          return a[1] - b[1];\n        });\n        console.log(newList);\n        return { ...state\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n_c = ToDoReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoReducer\");","map":{"version":3,"names":["addToDo","checked","deleteToDo","editToDo","removeAllChecked","sortAZ","stateDefault","todo","ToDoReducer","state","action","type","content","newToDo","status","newState","key","index","splice","checkedToDo","newToDoList","forEach","work","newList","sort","a","b","console","log"],"sources":["/home/pc/todolisttuoitre/my-app/src/redux/toDoReducer/todoReducer.js"],"sourcesContent":["import { addToDo, checked, deleteToDo, editToDo, removeAllChecked, sortAZ } from \"../type/type\";\n\nconst stateDefault = {\n    todo: [\n    ]   \n}\n\nexport const ToDoReducer = (state = stateDefault, action)=>{\n    switch(action.type){\n        case addToDo: {\n            const {content} = action.todo;\n            const newToDo = [...state.todo,{content: content,status:false}];\n            const newState = {...state,todo:[...newToDo]};\n            state = newState;\n            return {...state}\n        };\n        case editToDo:{\n            const {content,key} = action.todo;\n            let newToDo = [...state.todo];\n            newToDo[key].content = content.content;\n            state.todo = [...newToDo];\n            return {...state}\n        };\n        case deleteToDo:{\n            let {index} = action;\n            let newToDo = [...state.todo];\n            newToDo.splice(index,1);\n            state.todo = [...newToDo];\n            return {...state}\n        };\n        case checked:{\n            let {checked,index} = action.checkedToDo;\n            let newToDoList = [...state.todo];\n            newToDoList[index].status = checked;\n            state.todo = [...newToDoList];\n            return {...state};\n        };\n        case removeAllChecked: {\n            let newToDoList = [...state.todo];\n            newToDoList.forEach(work => work.status = false); \n            state.todo = [...newToDoList];\n            return {...state};\n        };\n        case sortAZ: {\n            let newToDoList = [...state.todo];\n            let newList = newToDoList.sort((a,b)=>{return a[1] - b[1]});\n            console.log(newList)\n            return {...state}\n        }\n        default: return {...state}\n    }\n} "],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,gBAAjD,EAAmEC,MAAnE,QAAiF,cAAjF;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;AADW,CAArB;AAKA,OAAO,MAAMC,WAAW,GAAG,YAAgC;EAAA,IAA/BC,KAA+B,uEAAvBH,YAAuB;EAAA,IAATI,MAAS;;EACvD,QAAOA,MAAM,CAACC,IAAd;IACI,KAAKX,OAAL;MAAc;QACV,MAAM;UAACY;QAAD,IAAYF,MAAM,CAACH,IAAzB;QACA,MAAMM,OAAO,GAAG,CAAC,GAAGJ,KAAK,CAACF,IAAV,EAAe;UAACK,OAAO,EAAEA,OAAV;UAAkBE,MAAM,EAAC;QAAzB,CAAf,CAAhB;QACA,MAAMC,QAAQ,GAAG,EAAC,GAAGN,KAAJ;UAAUF,IAAI,EAAC,CAAC,GAAGM,OAAJ;QAAf,CAAjB;QACAJ,KAAK,GAAGM,QAAR;QACA,OAAO,EAAC,GAAGN;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKN,QAAL;MAAc;QACV,MAAM;UAACS,OAAD;UAASI;QAAT,IAAgBN,MAAM,CAACH,IAA7B;QACA,IAAIM,OAAO,GAAG,CAAC,GAAGJ,KAAK,CAACF,IAAV,CAAd;QACAM,OAAO,CAACG,GAAD,CAAP,CAAaJ,OAAb,GAAuBA,OAAO,CAACA,OAA/B;QACAH,KAAK,CAACF,IAAN,GAAa,CAAC,GAAGM,OAAJ,CAAb;QACA,OAAO,EAAC,GAAGJ;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKP,UAAL;MAAgB;QACZ,IAAI;UAACe;QAAD,IAAUP,MAAd;QACA,IAAIG,OAAO,GAAG,CAAC,GAAGJ,KAAK,CAACF,IAAV,CAAd;QACAM,OAAO,CAACK,MAAR,CAAeD,KAAf,EAAqB,CAArB;QACAR,KAAK,CAACF,IAAN,GAAa,CAAC,GAAGM,OAAJ,CAAb;QACA,OAAO,EAAC,GAAGJ;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKR,OAAL;MAAa;QACT,IAAI;UAACA,OAAD;UAASgB;QAAT,IAAkBP,MAAM,CAACS,WAA7B;QACA,IAAIC,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACF,IAAV,CAAlB;QACAa,WAAW,CAACH,KAAD,CAAX,CAAmBH,MAAnB,GAA4Bb,OAA5B;QACAQ,KAAK,CAACF,IAAN,GAAa,CAAC,GAAGa,WAAJ,CAAb;QACA,OAAO,EAAC,GAAGX;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKL,gBAAL;MAAuB;QACnB,IAAIgB,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACF,IAAV,CAAlB;QACAa,WAAW,CAACC,OAAZ,CAAoBC,IAAI,IAAIA,IAAI,CAACR,MAAL,GAAc,KAA1C;QACAL,KAAK,CAACF,IAAN,GAAa,CAAC,GAAGa,WAAJ,CAAb;QACA,OAAO,EAAC,GAAGX;QAAJ,CAAP;MACH;MAAA;;IACD,KAAKJ,MAAL;MAAa;QACT,IAAIe,WAAW,GAAG,CAAC,GAAGX,KAAK,CAACF,IAAV,CAAlB;QACA,IAAIgB,OAAO,GAAGH,WAAW,CAACI,IAAZ,CAAiB,CAACC,CAAD,EAAGC,CAAH,KAAO;UAAC,OAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;QAAmB,CAA5C,CAAd;QACAC,OAAO,CAACC,GAAR,CAAYL,OAAZ;QACA,OAAO,EAAC,GAAGd;QAAJ,CAAP;MACH;;IACD;MAAS,OAAO,EAAC,GAAGA;MAAJ,CAAP;EAzCb;AA2CH,CA5CM;KAAMD,W"},"metadata":{},"sourceType":"module"}